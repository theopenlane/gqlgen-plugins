{{ reserveImport "context"  }}
{{ reserveImport "encoding/csv" }}
{{ reserveImport "os" }}
{{ reserveImport "sync" }}
{{ reserveImport "github.com/rs/zerolog/log" }}
{{ reserveImport "github.com/theopenlane/utils/rout" }}

{{- if $.EntImport }}
{{ reserveImport $.EntImport }}
{{- end }}

{{- if $.ModelImport }}
{{ reserveImport $.ModelImport }}
{{- end }}

{{ $root := . }}

{{ range $object := .Objects }}

{{- if eq $object.OperationType "create" }}
// bulkCreate{{ $object.Name }} uses the CreateBulk function to create multiple {{ $object.Name }} entities
func (r *mutationResolver) bulkCreate{{ $object.Name }} (ctx context.Context, input []*generated.Create{{ $object.Name }}Input) (*{{ $root.ModelPackage }}{{ $object.Name }}BulkCreatePayload, error) {
    c := withTransactionalMutation(ctx)
	builders := make([]*generated.{{ $object.Name }}Create, len(input))
	for i, data := range input {
		builders[i] = c.{{ $object.Name }}.Create().SetInput(*data)
	}

	res, err := c.{{ $object.Name }}.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "{{ $object.Name | toLower }}"})
	}

	// return response
	return &{{ $root.ModelPackage }}{{ $object.Name }}BulkCreatePayload{
		{{ $object.PluralName }}: res,
	}, nil
}
{{- else if eq $object.OperationType "update" }}
// bulkUpdate{{ $object.Name }} updates multiple {{ $object.Name }} entities
func (r *mutationResolver) bulkUpdate{{ $object.Name }} (ctx context.Context, ids []string, input generated.Update{{ $object.Name }}Input) (*{{ $root.ModelPackage }}{{ $object.Name }}BulkUpdatePayload, error) {
	if len(ids) == 0 {
		return nil, rout.NewMissingRequiredFieldError("ids")
	}

	c := withTransactionalMutation(ctx)
	results := make([]*generated.{{ $object.Name }}, 0, len(ids))
	updatedIDs := make([]string, 0, len(ids))
	
	// update each {{ $object.Name | toLower }} individually to ensure proper validation
	for _, id := range ids {
		if id == "" {
			log.Error().Msg("empty id in bulk update for {{ $object.Name | toLower }}")
			continue
		}

		// get the existing entity first
		existing, err := c.{{ $object.Name }}.Get(ctx, id)
		if err != nil {
			log.Error().Err(err).Str("{{ $object.Name | toLower }}_id", id).Msg("failed to get {{ $object.Name | toLower }} in bulk update operation")
			continue
		}

		// setup update request
		updatedEntity, err := existing.Update().SetInput(input).Save(ctx)
		if err != nil {
			log.Error().Err(err).Str("{{ $object.Name | toLower }}_id", id).Msg("failed to update {{ $object.Name | toLower }} in bulk operation")
			continue
		}

		results = append(results, updatedEntity)
		updatedIDs = append(updatedIDs, id)
	}

	return &{{ $root.ModelPackage }}{{ $object.Name }}BulkUpdatePayload{
		{{ $object.PluralName }}: results,
		UpdatedIDs: updatedIDs,
	}, nil
}
{{- else if eq $object.OperationType "delete" }}
// bulkDelete{{ $object.Name }} deletes multiple {{ $object.Name }} entities by their IDs
func (r *mutationResolver) bulkDelete{{ $object.Name }} (ctx context.Context, ids []string) (*{{ $root.ModelPackage }}{{ $object.Name }}BulkDeletePayload, error) {
	if len(ids) == 0 {
		return nil, rout.NewMissingRequiredFieldError("ids")
	}

	deletedIDs := make([]string, 0, len(ids))
	errors := make([]error, 0, len(ids))

	var mu sync.Mutex

	funcs := make([]func(), 0, len(ids))
	for _, id := range ids {
		funcs = append(funcs, func() {
      // delete each {{ $object.Name | toLower }} individually to ensure proper cleanup
			if err := r.db.{{ $object.Name }}.DeleteOneID(id).Exec(ctx); err != nil {
				log.Error().Err(err).Str("{{ $object.Name | toLower }}_id", id).Msg("failed to delete {{ $object.Name | toLower }} in bulk operation")
				mu.Lock()
				errors = append(errors, err)
				mu.Unlock()
				return
			}

			if err := generated.{{ $object.Name }}EdgeCleanup(ctx, id); err != nil {
				log.Error().Err(err).Str("{{ $object.Name | toLower }}_id", id).Msg("failed to cleanup {{ $object.Name | toLower }} edges in bulk operation")
				mu.Lock()
				errors = append(errors, err)
				mu.Unlock()
				return
			}

			mu.Lock()
			deletedIDs = append(deletedIDs, id)
			mu.Unlock()
		})
	}

	r.withPool().SubmitMultipleAndWait(funcs)

	if len(errors) > 0 {
		log.Error().Int("deleted_items", len(deletedIDs)).Int("errors", len(errors)).Msg("some {{ $object.Name | toLower }} deletions failed")
	}

	return &{{ $root.ModelPackage }}{{ $object.Name }}BulkDeletePayload{
		DeletedIDs: deletedIDs,
	}, nil
}
{{- end }}

{{ end }}
