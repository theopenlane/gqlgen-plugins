{{ reserveImport "context"  }}
{{ reserveImport "encoding/csv" }}
{{ reserveImport "os" }}
{{ reserveImport "fmt" }}
{{ reserveImport "github.com/rs/zerolog/log" }}
{{ reserveImport "github.com/theopenlane/utils/rout" }}

{{- if $.EntImport }}
{{ reserveImport $.EntImport }}
{{- end }}

{{- if $.ModelImport }}
{{ reserveImport $.ModelImport }}
{{- end }}

{{ $root := . }}

{{ range $object := .Objects }}

{{- if eq $object.OperationType "create" }}
// bulkCreate{{ $object.Name }} uses the CreateBulk function to create multiple {{ $object.Name }} entities
func (r *mutationResolver) bulkCreate{{ $object.Name }} (ctx context.Context, input []*generated.Create{{ $object.Name }}Input) (*{{ $root.ModelPackage }}{{ $object.Name }}BulkCreatePayload, error) {
    c := withTransactionalMutation(ctx)
	builders := make([]*generated.{{ $object.Name }}Create, len(input))
	for i, data := range input {
		builders[i] = c.{{ $object.Name }}.Create().SetInput(*data)
	}

	res, err := c.{{ $object.Name }}.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "{{ $object.Name | toLower }}"})
	}

	// return response
	return &{{ $root.ModelPackage }}{{ $object.Name }}BulkCreatePayload{
		{{ $object.PluralName }}: res,
	}, nil
}
{{- else if eq $object.OperationType "delete" }}
// bulkDelete{{ $object.Name }} deletes multiple {{ $object.Name }} entities by their IDs
func (r *mutationResolver) bulkDelete{{ $object.Name }} (ctx context.Context, ids []string) (*{{ $root.ModelPackage }}{{ $object.Name }}BulkDeletePayload, error) {
	if len(ids) == 0 {
		return nil, rout.NewMissingRequiredFieldError("ids")
	}

	deletedIDs := make([]string, 0, len(ids))
	
	// delete each {{ $object.Name | toLower }} individually to ensure proper cleanup
	for _, id := range ids {
		if err := withTransactionalMutation(ctx).{{ $object.Name }}.DeleteOneID(id).Exec(ctx); err != nil {
			log.Error().Err(err).Str("{{ $object.Name | toLower }}_id", id).Msg("failed to delete {{ $object.Name | toLower }} in bulk operation")
			continue
		}

		// call edge cleanup if the function exists
		if err := generated.{{ $object.Name }}EdgeCleanup(ctx, id); err != nil {
			log.Error().Err(err).Str("{{ $object.Name | toLower }}_id", id).Msg("failed to cleanup {{ $object.Name | toLower }} edges in bulk operation")
			continue
		}

		deletedIDs = append(deletedIDs, id)
	}

	return &{{ $root.ModelPackage }}{{ $object.Name }}BulkDeletePayload{
		DeletedIDs: deletedIDs,
	}, nil
}
{{- end }}

{{ end }}
