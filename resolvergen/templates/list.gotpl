{{ $entity := .Field.TypeReference.Definition.Name | getEntityName -}}
{{ reserveImport "github.com/theopenlane/gqlgen-plugins/graphutils" }}
{{ if and (hasArgument "where" .Field.FieldDefinition.Arguments) (hasStatusField $entity) }}{{ reserveImport "github.com/theopenlane/core/pkg/enums" }}{{ end }}
{{ $hasAfter := hasArgument "after" .Field.FieldDefinition.Arguments }}
{{ $hasFirst := hasArgument "first" .Field.FieldDefinition.Arguments }}
{{ $hasBefore := hasArgument "before" .Field.FieldDefinition.Arguments }}
{{ $hasLast := hasArgument "last" .Field.FieldDefinition.Arguments }}
{{ $hasOrderBy := hasArgument "orderBy" .Field.FieldDefinition.Arguments }}
{{ $orderByIsList := isListType "orderBy" .Field.FieldDefinition.Arguments }}
{{ $hasWhere := hasArgument "where" .Field.FieldDefinition.Arguments }}

{{ if and $hasFirst $hasLast }}
// set page limit if nothing was set
first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)
{{- end }}

{{ if and $hasWhere (hasStatusField $entity) }}
// apply default status filtering to exclude archived items unless they are explicitly requested
if where == nil {
	where = &generated.{{ $entity }}WhereInput{}
}
if where.Status == nil && where.StatusNEQ == nil && where.StatusIn == nil && where.StatusNotIn == nil {
	archivedStatus := {{ getArchivedStatusValue $entity }}
	where.StatusNEQ = &archivedStatus
}
{{- end }}

{{ if $hasOrderBy }}
if orderBy == nil {
	{{- if $orderByIsList }}
	orderBy = []*generated.{{ $entity }}Order{
		{
			Field:     generated.{{ $entity }}OrderFieldCreatedAt,
			Direction: entgql.OrderDirectionDesc,
		},
	{{- else }}
	orderBy = &generated.{{ $entity }}Order{
		Field: generated.{{ $entity }}OrderFieldCreatedAt,
		Direction: entgql.OrderDirectionDesc,
	{{- end }}
	}
}
{{- end }}

query, err :=  withTransactionalMutation(ctx).{{ $entity }}.Query().CollectFields(ctx)
if err != nil {
	return nil, parseRequestError(err, action{action: ActionGet, object: "{{ $entity | toLower }}"})
}

res, err := query.Paginate(
	ctx,
	{{- if $hasAfter }}
	after,
	{{- end -}}
	{{- if $hasFirst }}
	first,
	{{- end -}}
	{{- if $hasBefore }}
	before,
	{{- end -}}
	{{- if $hasLast }}
	last,
	{{- end -}}
	{{- if $hasOrderBy }}
	generated.With{{ $entity }}Order(orderBy),
	{{- end -}}
	{{- if $hasWhere }}
	generated.With{{ $entity }}Filter(where.Filter),
	{{- end -}}
)
if err != nil {
	return nil, parseRequestError(err, action{action: ActionGet, object: "{{ $entity | toLower }}"})
}

return res, err
