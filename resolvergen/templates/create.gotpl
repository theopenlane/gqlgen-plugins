{{ reserveImport "github.com/theopenlane/utils/rout" }}
{{ reserveImport "github.com/rs/zerolog/log" }}

{{ $entity := .Field.TypeReference.Definition.Name | getEntityName  -}}
{{ $isOrgOwned := .Field | hasOwnerField  -}}

{{- if $isOrgOwned }}
// set the organization in the auth context if its not done for us
if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
	log.Error().Err(err).Msg("failed to set organization in auth context")

	return nil, rout.NewMissingRequiredFieldError("owner_id")
}
{{- end }}

res, err := withTransactionalMutation(ctx).{{ $entity }}.Create().SetInput(input).Save(ctx)
if err != nil {
	return nil, parseRequestError(err, action{action: ActionCreate, object: "{{ $entity | toLower }}"})
}

return &{{ $entity }}CreatePayload{
	{{ $entity }}: res,
}, nil
