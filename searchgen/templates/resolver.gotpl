{{ reserveImport "context" }}

{{ reserveImport "github.com/rs/zerolog/log" }}

{{- if $.EntImport }}
{{ reserveImport $.EntImport }}
{{- end }}

{{- if $.ModelImport }}
{{ reserveImport $.ModelImport }}
{{- end }}

{{ $root := . }}

// Search is the resolver for the search field.
{{- if eq $.Name "Global" }}
func (r *queryResolver) Search(ctx context.Context, query string) (*{{ .ModelPackage }}SearchResultConnection, error) {
{{- else }}
func (r *queryResolver) {{ $.Name }}Search(ctx context.Context, query string) (*{{ .ModelPackage }}SearchResultConnection, error) {
{{- end }}
	if len(query) < 3 {
		return nil, ErrSearchQueryTooShort
	}

	var (
		errors []error
        {{- range $object := $.Objects }}
		{{ $object.Name | toLower }}Results []*generated.{{ $object.Name }}
        {{- end }}
	)

	r.withPool().SubmitMultipleAndWait([]func(){
        {{- range $object := $.Objects }}
		func() {
			var err error
			{{ $object.Name | toLower }}Results, err = search{{ $object.Name | toPlural }}(ctx, query)
			if err != nil {
				errors = append(errors, err)
			}
		},
        {{- end }}
	})

	// Check all errors and return a single error if any of the searches failed
	if len(errors) > 0 {
		log.Error().Errs("errors", errors).Msg("search failed")

		return nil, ErrSearchFailed
	}

	// return the results
	return &{{$root.ModelPackage}}SearchResultConnection{
		Nodes: []{{$root.ModelPackage}}SearchResult{
            {{- range $object := $.Objects }}
			{{$root.ModelPackage}}{{ $object.Name }}SearchResult{
				{{ $object.Name | toPlural }}: {{ $object.Name | toLower }}Results,
			},
            {{- end }}
		},
	}, nil
}

{{- range $object := $.Objects }}

{{- if eq $.Name "Global" }}
func (r *queryResolver) {{ $object.Name }}Search(ctx context.Context, query string) (*{{$root.ModelPackage}}{{ $object.Name }}SearchResult, error) {
	{{ $object.Name | toLower }}Results, err := search{{ $object.Name | toPlural }}(ctx, query)
{{- else }}
func (r *queryResolver) Admin{{ $object.Name }}Search(ctx context.Context, query string) (*{{$root.ModelPackage}}{{ $object.Name }}SearchResult, error) {
		{{ $object.Name | toLower }}Results, err := adminSearch{{ $object.Name | toPlural }}(ctx, query)
{{- end}}

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return &{{$root.ModelPackage}}{{ $object.Name }}SearchResult{
		{{ $object.Name | toPlural }}: {{ $object.Name | toLower }}Results,
	}, nil
}
{{- end }}