{{- reserveImport "context" }}

{{- reserveImport "github.com/rs/zerolog/log" }}
{{- reserveImport "entgo.io/contrib/entgql" }}
{{- reserveImport "github.com/theopenlane/gqlgen-plugins/graphutils" }}

{{- if $.EntImport }}
{{ reserveImport $.EntImport }}
{{- end }}

{{- if $.RuleImport }}
{{ reserveImport $.RuleImport }}
{{- end }}

{{- if $.ModelImport }}
{{ reserveImport $.ModelImport }}
{{- end }}

{{ $root := . }}

// Search is the resolver for the search field.
{{- if eq $.Name "Global" }}
func (r *queryResolver) Search(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*{{ .ModelPackage }}SearchResults, error) {
{{- else }}
func (r *queryResolver) {{ $.Name }}Search(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*{{ .ModelPackage }}SearchResults, error) {
	{{- if $.RuleImport }}
	// ensure the user is a system admin
	isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
	if err != nil || !isAdmin {
		return nil, generated.ErrPermissionDenied
	}
	{{- end }}
{{- end }}
	if len(query) < 3 {
		return nil, ErrSearchQueryTooShort
	}

	first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

	var (
		errors []error
        {{- range $object := $.Objects }}
		{{ $object.Name | toLower }}Results *generated.{{ $object.Name }}Connection
        {{- end }}
	)

	r.withPool().SubmitMultipleAndWait([]func(){
        {{- range $object := $.Objects }}
		func() {
			var err error
			{{ $object.Name | toLower }}Results, err = search{{ $object.Name | toPlural }}(ctx, query, after, first, before, last)
			if err != nil {
				errors = append(errors, err)
			}
		},
        {{- end }}
	})

	// log the errors for debugging
	if len(errors) > 0 {
		log.Error().Errs("errors", errors).Msg("search failed for one or more entities")
	}

	// return the results
	res := &{{ .ModelPackage }}SearchResults{
		TotalCount: 0,
	}

	{{- range $object := $.Objects }}
	if {{ $object.Name | toLower }}Results != nil && len({{ $object.Name | toLower }}Results.Edges) > 0 {
		res.{{ $object.Name | toPlural }} = {{ $object.Name | toLower }}Results

		res.TotalCount += {{ $object.Name | toLower }}Results.TotalCount
	}
	{{- end }}

	return res, nil
}

{{- range $object := $.Objects }}

{{- if eq $.Name "Global" }}
func (r *queryResolver) {{ $object.Name }}Search(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.{{ $object.Name }}Connection, error) {
	{{ $object.Name | toLower }}Results, err := search{{ $object.Name | toPlural }}(ctx, query, after, first, before, last)
{{- else }}
func (r *queryResolver) Admin{{ $object.Name }}Search(ctx context.Context, query string, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int) (*generated.{{ $object.Name }}Connection, error) {
		{{- if $.RuleImport }}
		// ensure the user is a system admin
		isAdmin, err := rule.CheckIsSystemAdminWithContext(ctx)
		if err != nil || !isAdmin {
			return nil, generated.ErrPermissionDenied
		}
		{{- end }}

		first, last = graphutils.SetFirstLastDefaults(first, last, r.maxResultLimit)

		{{ $object.Name | toLower }}Results, err := adminSearch{{ $object.Name | toPlural }}(ctx, query, after, first, before, last)
{{- end}}

	if err != nil {
		return nil, ErrSearchFailed
	}

	// return the results
	return {{ $object.Name | toLower }}Results, nil
}
{{- end }}