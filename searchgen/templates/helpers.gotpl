{{reserveImport "context" }}
{{reserveImport "time" }}

{{reserveImport $.EntPackageName "generated"}}
{{reserveImport "entgo.io/ent/dialect/sql"}}
{{reserveImport "entgo.io/ent/dialect/sql/sqljson"}}

import (
{{- range $object := $.Objects }}
    "{{ $.EntPackageName }}/{{ $object.Name | toLower }}"
{{- end }}
)

var (
	maxSearchTime = time.Duration(30 * time.Second)
)

// searchResult is a generic struct to hold the result of a search operation
type searchResult[T any] struct {
	result T
	err    error
}

{{/* For each schema */}}
{{- range $object := $.Objects }}
// search{{ $object.Name  }} searches for {{ $object.Name  }} based on the query string looking for matches
func search{{ $object.Name | toPlural }}(ctx context.Context, query string) ([]*generated.{{ $object.Name }}, error) {
	return withTransactionalMutation(ctx).{{ $object.Name  }}.Query().Where(
		{{ $object.Name  | toLower }}.Or(
			{{- range $i, $field := $object.Fields }}
			    {{- if eq $field.Type "json.RawMessage" }}
				func(s *sql.Selector) {
				{{- if ne $field.Path "" }}
				s.Where(
					sqljson.StringContains({{ $object.Name | toLower }}.Field{{ $field.Name }}, query,sqljson.Path("{{ $field.Path }}")), // search by {{ $field.Name }} at {{ $field.Path }}
				)
				{{- else if ne $field.DotPath "" }}
				s.Where(
					sqljson.StringContains({{ $object.Name | toLower }}.Field{{ $field.Name }}, query,sqljson.DotPath("{{ $field.DotPath }}")), // search by {{ $field.Name }} at {{ $field.DotPath }}
				)
				{{- else }}
					likeQuery := "%" + query + "%"
					s.Where(sql.ExprP("({{ $field.Name | toLower }})::text LIKE ${{ add $i 1 }}", likeQuery)) // search by {{ $field.Name }}
				{{- end }}
				},
				{{- else }}
				{{ $object.Name | toLower }}.{{ $field.Name }}ContainsFold(query), // search by {{ $field.Name }}
				{{- end }}
			{{- end }}
		),
	).All(ctx)
}

// search{{ $object.Name  }} searches for {{ $object.Name  }} based on the query string looking for matches
func adminSearch{{ $object.Name | toPlural }}(ctx context.Context, query string) ([]*generated.{{ $object.Name }}, error) {
	return withTransactionalMutation(ctx).{{ $object.Name  }}.Query().Where(
		{{ $object.Name  | toLower }}.Or(
			{{- range $i, $field := $object.AdminFields }}
  				{{- if eq $field.Type "json.RawMessage" }}
				func(s *sql.Selector) {
				{{- if ne $field.Path "" }}
				s.Where(
					sqljson.StringContains({{ $object.Name | toLower }}.Field{{ $field.Name }}, query,sqljson.Path("{{ $field.Path }}")), // search by {{ $field.Name }} at {{ $field.Path }}
				)
				{{- else if ne $field.DotPath "" }}
				s.Where(
					sqljson.StringContains({{ $object.Name | toLower }}.Field{{ $field.Name }}, query,sqljson.DotPath("{{ $field.DotPath }}")), // search by {{ $field.Name }} at {{ $field.DotPath }}
				)
				{{- else }}
					likeQuery := "%" + query + "%"
					s.Where(sql.ExprP("({{ $field.Name | toLower }})::text LIKE ${{ add $i 1 }}", likeQuery)) // search by {{ $field.Name }}
				{{- end }}
				},
				{{- else }}
				{{ $object.Name | toLower }}.{{ $field.Name }}ContainsFold(query), // search by {{ $field.Name }}
				{{- end }}
			{{- end }}
		),
	).All(ctx)
}
{{ end }}
